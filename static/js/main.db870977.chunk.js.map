{"version":3,"sources":["logo.svg","App.js","Weather/CityWeather/CityWeather.js","serviceWorker.js","index.js"],"names":["module","exports","App","options","value","label","apiURL","apiID","CityWeather","props","handleChange","selectedOption","setState","isLoaded","fetch","_","get","method","headers","then","response","json","data","items","catch","error","state","className","this","onChange","placeholder","style","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,6TCyB5BC,I,6DCXTC,G,gDAAU,CACd,CAAEC,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,SAAUC,MAAO,YAGtBC,EAAS,sFACTC,EAAQ,mCAqGCC,E,YAjGb,WAAYC,GAAQ,IAAD,8BAChB,4CAAMA,KASTC,aAAe,SAAAC,GAEb,EAAKC,SAAS,CAACD,eAAgBA,EAAgBE,UAAU,IAEzDC,MAAMR,EAAO,MAAOS,IAAEC,IAAIL,EAAgB,SAAS,UAAUJ,EAAM,gBAAiB,CAClFU,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,OAIlCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAI,OACR,EAAKV,SAAS,CACZW,MAAOD,EACPT,UAAU,OAIbW,OAAM,SAAAC,GAAK,OAAI,EAAKb,SAAS,CAAEa,QAAOZ,UAAU,QA7BhD,EAAKa,MAAQ,CACXf,eAAgB,KAChBc,MAAO,KACPZ,UAAU,EACVU,MAAO,IANO,E,sEAoCjB,OAEE,0BAAMI,UAAU,gBAEZ,yBAAKA,UAAU,WAEb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,iBAEb,kBAAC,IAAD,CACEvB,MAAOwB,KAAKF,MAAMf,eAClBkB,SAAUD,KAAKlB,aACfP,QAASA,EACT2B,YAAe,qBAGjB,yBAAKH,UAAWC,KAAKF,MAAMb,SAAW,wBAA0B,SAAUkB,MAAS,CAACC,UAAW,SAC7F,yBAAKL,UAAU,iBACb,+BACE,+BACE,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,mBAAmBZ,IAAEC,IAAIY,KAAKF,MAAO,cAAnD,2BAMR,yBAAKC,UAAU,4BACb,+BACE,+BACE,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,mBAAd,gBAA8CZ,IAAEC,IAAIY,KAAKF,MAAO,kCAElE,wBAAIC,UAAU,eACZ,wBAAIA,UAAU,mBAAd,gBAA8CZ,IAAEC,IAAIY,KAAKF,MAAO,mBAAhE,YAEF,wBAAIC,UAAU,eACZ,wBAAIA,UAAU,mBAAd,eAA6CZ,IAAEC,IAAIY,KAAKF,MAAO,yBAA/D,YAEF,wBAAIC,UAAU,eACZ,wBAAIA,UAAU,mBAAd,aAA2CZ,IAAEC,IAAIY,KAAKF,MAAO,uBAA7D,MAEF,wBAAIC,UAAU,eACZ,wBAAIA,UAAU,mBAAd,cAA4CZ,IAAEC,IAAIY,KAAKF,MAAO,qBAEhE,wBAAIC,UAAU,eACZ,wBAAIA,UAAU,mBAAd,aAA2CZ,IAAEC,IAAIY,KAAKF,MAAO,iC,GApF7DO,aCbNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD4HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.db870977.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport _ from 'lodash';\n\nimport './CityWeather.css';\nimport '../../assets/vendor/bootstrap/css/bootstrap.min.css';\nimport '../../assets/fonts/font-awesome-4.7.0/css/font-awesome.min.css'\nimport '../../assets/vendor/animate/animate.css'\nimport '../../assets/vendor/select2/select2.min.css'\nimport '../../assets/vendor/perfect-scrollbar/perfect-scrollbar.css'\nimport '../../assets/css/util.css'\nimport '../../assets/css/main.css'\n\n\nconst options = [\n  { value: 'Toronto', label: 'Toronto' },\n  { value: 'Vancouver', label: 'Vancouver' },\n  { value: 'Montreal', label: 'Montreal' },\n  { value: 'Ottawa', label: 'Ottawa' },\n  { value: 'Quebec', label: 'Quebec' },\n];\n\nconst apiURL = 'https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather';\nconst apiID = 'c03531387aed7cd065a19cc3e1191d2a';\n\nclass CityWeather extends Component {\n\n  constructor(props) {\n     super(props);\n     this.state = {\n       selectedOption: null,\n       error: null,\n       isLoaded: false,\n       items: []\n     };\n   }\n\n  handleChange = selectedOption => {\n\n    this.setState({selectedOption: selectedOption, isLoaded: false})\n\n    fetch(apiURL+'?q='+ _.get(selectedOption, 'value')+'&APPID='+apiID+'&units=metric', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      }\n    })\n    // We get the API response and receive data in JSON format...\n    .then(response => response.json())\n    // ...then we update the users state\n    .then(data =>\n      this.setState({\n        items: data,\n        isLoaded: true\n      })\n    )\n    // Catch any errors we hit and update the app\n    .catch(error => this.setState({ error, isLoaded: false }));\n  };\n\n  render() {\n\n    return (\n\n      <form className=\"example-form\">\n\n          <div className=\"limiter\" >\n\n            <div className=\"container-table100\">\n              <div className=\"wrap-table100\">\n\n                <Select\n                  value={this.state.selectedOption}\n                  onChange={this.handleChange}\n                  options={options}\n                  placeholder = {'Select a city...'}\n                />\n\n                <div className={this.state.isLoaded ? 'table100 ver1 m-b-110' : 'hidden'} style = {{marginTop: \"20px\"}}>\n                  <div className=\"table100-head\">\n                    <table>\n                      <thead>\n                        <tr className=\"row100 head\">\n                          <th className=\"cell100 column1\">{_.get(this.state, 'items.name')} Weather over React</th>\n                        </tr>\n                      </thead>\n                    </table>\n                  </div>\n\n                  <div className=\"table100-body js-pscroll\">\n                    <table>\n                      <tbody>\n                        <tr className=\"row100 body\">\n                          <td className=\"cell100 column1\">Description: {_.get(this.state, 'items.weather[0].description')}</td>\n                        </tr>\n                        <tr className=\"row100 body\">\n                          <td className=\"cell100 column1\">Temperature: {_.get(this.state, 'items.main.temp')} &#8451;</td>\n                        </tr>\n                        <tr className=\"row100 body\">\n                          <td className=\"cell100 column1\">Feels Like: {_.get(this.state, 'items.main.feels_like')} &#8451;</td>\n                        </tr>\n                        <tr className=\"row100 body\">\n                          <td className=\"cell100 column1\">Humidity: {_.get(this.state, 'items.main.humidity')}%</td>\n                        </tr>\n                        <tr className=\"row100 body\">\n                          <td className=\"cell100 column1\">Longitude: {_.get(this.state, 'items.coord.lon')}</td>\n                        </tr>\n                        <tr className=\"row100 body\">\n                          <td className=\"cell100 column1\">Latitude: {_.get(this.state, 'items.coord.lat')}</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n      </form>\n    );\n  }\n}\n\nexport default CityWeather;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CityWeather from './Weather/CityWeather/CityWeather'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CityWeather />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}